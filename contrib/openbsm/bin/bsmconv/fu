#!/bin/sh

TEST_DIR=tests/
POSITIVE_DIR=${TEST_DIR}positive/
NEGATIVE_DIR=${TEST_DIR}negative/
MAKEFILE_DIR=../../../../usr.bin/bsmconv/
BIN=${MAKEFILE_DIR}bsmconv
LA_DOCS_JS=NOTES_ON_LINUX_AUDIT.js
MAKEFILE=${MAKEFILE_DIR}Makefile

PROGRESS_PENDING_CHAR="\."
update_progress_bar() {
    UPDATE="$1"
    PROGRESS="$(echo "$PROGRESS" | sed 's/'"$PROGRESS_PENDING_CHAR"'/'"$UPDATE"'/')"
}

fu_make() {
    make -C "$MAKEFILE_DIR"|| exit 1
}

fu_result() {
    update_progress_bar "$2"
    echo "[$1]"
    printf "%s (%d) $PROGRESS\n" "$3" "$4"
}

fu_success() {
    fu_result "$1" "#" "PASS" "$2"
}

fu_failure() {
    fu_result "$1" "F" "FAIL" "$2"
}

fu_run_test_set() {
    trap 'exit 130' INT
    DIR="$1"
    ONSUCCESS="$2"
    ONFAILURE="$3"
    OPTS="$4"
    for TEST_FILE in "$DIR"*.input; do
        echo ======================================================
        echo "[$TEST_FILE]"
        echo ------------------------------------------------------
    if [ "$OPTS" = "--" ]; then
        "$BIN" "$OPTS" < "$TEST_FILE" > /tmp/fu.log
        RETVAL="$?"
        praudit /tmp/fu.log
    else
        "$BIN" "$OPTS" < "$TEST_FILE"
        RETVAL="$?"
    fi
        echo ------------------------------------------------------
        if [ "$RETVAL" -eq 0 ]; then
            $ONSUCCESS $TEST_FILE $RETVAL
        else
            $ONFAILURE $TEST_FILE $RETVAL
        fi
    done
    echo ======================================================
}

fu_run_tests() {
    OPTS="$1"
    fu_run_test_set "$POSITIVE_DIR" 'fu_success' 'fu_failure' "$OPTS"
    fu_run_test_set "$NEGATIVE_DIR" 'fu_failure' 'fu_success' "$OPTS"
}

fu_usage() {
    echo "Usage: $0 <options>... "
    echo
    echo "  docs"
    echo "  -h"
    echo "  m"
    echo "  rp <test>"
    echo "  rv <args> <test>"
    echo "  t"
    echo "  tsv <args>"
    printf "%s\n%s\n" \
    "The game of chess is like a sword fight." \
    "You must think first before you move."
    exit 1
}

PROGRESS=$(printf "[%$(find ${TEST_DIR} -type f | wc -l)s]" " " | sed 's/\ /'"$PROGRESS_PENDING_CHAR"'/g')

if [ "$#" -eq 0 ]; then
    fu_usage
fi

while [ "$#" -gt 0 ]; do
    case "$1" in
    docs)
        shift
        # node "$LA_DOCS_JS" | python -m json.tool
        node "$LA_DOCS_JS" | \
            ruby -ryaml -rjson -e 'puts YAML.dump(JSON.parse(STDIN.read))'
        ;;
    m|make)
        shift
        fu_make
        ;;
    rp)
        shift
        "$BIN" < "$1" | praudit
        shift
        ;;
    rv)
        shift
        "$BIN" "$1" < "$2"
        shift 2
        ;;
    t|test|tests)
        shift
        fu_run_tests
        ;;
    tsv)
        shift
        fu_run_test_set "$2" 'fu_success' 'fu_failure' "$1"
        shift 2
        ;;
    tv)
        shift
        fu_run_tests "$1"
        shift
        ;;
    usage|help|-h|*)
        shift
        fu_usage
        ;;
    esac
done

